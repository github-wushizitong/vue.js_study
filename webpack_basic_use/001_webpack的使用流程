1,新建项目空白目录,并运行 npm init -y 命令,初始化包管理配置文件 package.json
2,新建src源代码目录,放置程序员写的源代码
3,新建 src -> index.html 首页和 src -> index.js 脚本文件
4,初始化首页基本的结构
5,运行 npm install jquery -S 命令,安装 jQuery,
    {
        -S
        即 --save（保存）
        包名会被注册在package.json的dependencies里面，在生产环境下这个包的依赖依然存在
        -D -
        即 --save-dev（生产）
        包名会被注册在 package.json的devDependencies 里面，仅在开发环境下存在的包用-D，如 babel，sass-loader这些解析器
    }
6,通过ES6模块化导入jQuery,实现列表隔行变色效果
7,在终端中运行 npm install webpack@5.42.1 webpack-cli@4.7.2 -D
8,在项目中配置webpack:
    {
        1,在项目根目录中创建webpack.config.js的weibpack的配置文件,并初始化基本配置
            module.exports={
                // mode用来指定构建模式,可选值又 development(开发模式) 和 production(生产模式),开发模式追求打包速度,生产模式追求的打包体积大小
                mode:'development'  
            }
        2,在package.json 中的 scripts 的节点下,新政 dev脚本如下:
        "scripts":{
            // script 节点下的脚本,可以通过 npm run 执行,例如 npm run dev
            "dev":"webpack"  
        }
    }
9,在终端中运行 npm run dev 命令,启动 weepack 进行项目的打包构建,构建好的 webpack 文件会自动生成项目根目录中的 dist 目录下面的 main.js ,包含了 js 中的代码和 jQuery中的代码
10,在 webpack 4.x 和 5.x 版本中,有如下默认约定:
    {
        1,默认的打包入口文件为 src -> index.js
        2,默认的输出文件路径为 dist -> main.js
        注意:可以在 webpack.config.js 中修改打包的默认约定      
    }
11,在 webpack.config.js 配置文件中, 通过 entry 节点指定打包入口文件,通过 output 节点指定打包出口的存放目录
    {
        const path = require('path');
        module.exports = {
            // 打包入口文件路径
            entry : path.join(__dirname,'./src/index.js'),
            // 打包出口文件存放路径
            output : path.join(__dirname,'./dist'),
            // 指定输出文件的名称
            filename : 'bundle.js'
        }
    }
12,通过安装和配置第三方插件,可以拓展 webpack 的能力,最常用的插件:
    {
        1, webpack-dev-server
            {
                1,类似于 node.js 中的 nodemon 工具
                2,每当修改了源代码, webpack 会自动进行项目的打包和构建
                3,npm install webpack-dev-server@3.11.2 -D
                4,配置 webpack-dev-server
                    {
                        1,修改 package.json -> scripts 中的 dev 命令如下
                            "scripts" : {
                                "dev" : "webpack serve"
                            }
                        2,再次运行 npm run dev 命令,重新进行项目的打包
                        3,在浏览器中访问 http://localhost:8080 地址,查看自动打包效果
                        4,注意: webpack-dev-server 会启动一个实时打包的 http 服务器
                        5,注意: webpack-dev-server 生成的文件在内存中,需要在html文件中改变script src 的引入路径为 webpack-dev-server 提示的根目录 /
                    }
            }
        2, html-webpack-plugin
            {
                webpack 中的 html 插件(类似于一个模板引擎插件)
                可以通过此插件自定制 index.html 页面的内容    
            }
    }
