1, 搭建 webpack 的目录树
    {
        1,新建项目空白目录,并运行 npm init -y 命令,初始化包管理配置文件 package.json
        2,新建src源代码目录,放置程序员写的源代码
        3,新建 src -> index.html 首页和 src -> index.js 脚本文件
        4,初始化首页基本的结构
    }
2, 安装 jQuery 实现隔行变色效果:
    {
        1, 运行 npm install jquery -S 命令,安装 jQuery,
            {
                -S
                即 --save（保存）
                包名会被注册在package.json的dependencies里面，在生产环境下这个包的依赖依然存在
                -D -
                即 --save-dev（生产）
                包名会被注册在 package.json的devDependencies 里面，仅在开发环境下存在的包用-D，如 babel，sass-loader这些解析器
            }
    }
3, 安装并且配置和使用 webpack webpack-cli第三方模块:
    {
        1, 在终端中运行 npm install webpack@5.42.1 webpack-cli@4.7.2 -D
        2, 在项目中配置webpack:
            {
                1, 在项目根目录中创建webpack.config.js的weibpack的配置文件,并初始化基本配置
                    module.exports={
                        // mode用来指定构建模式,可选值又 development(开发模式) 和 production(生产模式),开发模式追求打包速度,生产模式追求的打包体积大小
                        mode:'development'  
                    }
                2, 在package.json 中的 scripts 的节点下,新政 dev脚本如下:
                "scripts":{
                    // script 节点下的脚本,可以通过 npm run 执行,例如 npm run dev
                    "dev":"webpack"  
                }
            }
        3, 在终端中运行 npm run dev 命令,启动 weepack 进行项目的打包构建,构建好的 webpack 文件会自动生成项目根目录中的 dist 目录下面的 main.js ,包含了 js 中的代码和 jQuery中的代码
    }
4,在 webpack 4.x 和 5.x 版本中,有如下默认约定:
    {
        1,默认的打包入口文件为 src -> index.js
        2,默认的输出文件路径为 dist -> main.js
        注意:可以在 webpack.config.js 中修改打包的默认约定      
    }
5,在 webpack.config.js 配置文件中, 通过 entry 节点指定打包入口文件,通过 output 节点指定打包出口的存放目录
    {
        const path = require('path');
        module.exports = {
            // 打包入口文件路径
            entry : path.join(__dirname,'./src/index.js'),
            // 打包出口文件存放路径
            output : path.join(__dirname,'./dist'),
            // 指定输出文件的名称
            filename : 'bundle.js'
        }
    }
6,通过安装和配置第三方插件,可以拓展 webpack 的能力,最常用的插件:
    {
        1, webpack-dev-server
            {
                1,类似于 node.js 中的 nodemon 工具
                2,每当修改了源代码, webpack 会自动进行项目的打包和构建
                3,npm install webpack-dev-server@3.11.2 -D
                4,配置 webpack-dev-server
                    {
                        1,修改 package.json -> scripts 中的 dev 命令如下
                            "scripts" : {
                                "dev" : "webpack serve"
                            }
                        2,再次运行 npm run dev 命令,重新进行项目的打包
                        3,在浏览器中访问 http://localhost:8080 地址,查看自动打包效果
                        4,注意: webpack-dev-server 会启动一个实时打包的 http 服务器
                        5,注意: webpack-dev-server 生成的文件在内存中,需要在html文件中改变script src 的引入路径为 webpack-dev-server 提示的根目录 /
                    }
            }
        2, html-webpack-plugin
            {
                1,webpack 中的 html 插件(类似于一个模板引擎插件)
                2,可以通过此插件自定制 index.html 页面的内容
                3, npm install html-webpack-plugin@5.3.2 -D
                4,配置 html-webpack-plugin
                    {
                        // 1,导入 HTML 插件,得到一个构造函数
                        const HtmlPlugin = require('html-webpack-plugin');
                        // 2,创建 HTML 插件的实例对象
                        const htmlPlugin = new HtmlPlugin({
                            // 指定源文件的存放路径
                            template: './src/index.html',
                            // 指定生成的文件的存放路径  
                            filename: './index.html'
                        })
                        module.exports = {
                            mode: 'development',
                            // 通过 plugins 节点,使 htmlPlugin 插件生效
                            plugins: [htmlPlugin]
                        }
                    }
                5,注意:自动生成的文件存放在了内存当中,可以直接使用根目录访问index.html
            }
    }
7, devServer 节点
    {
        1,在 webpack.config.js 配置文件中,通过 devServer 节点对 webpack-dev-server 插件进行更多配置
            {
                devServer: {
                    // 初次打包完成后,自动打开浏览器
                    open: true,
                    // 实时打包所使用的主机地址
                    host: '127.0.0.1',
                    // 实时打包所使用的端口号
                    port: 80
                }
            }
    }
8, loder 的使用和配置
    {
        1, 在实际开发过程中, webpack 默认只能打包 .js 的模块文件,非 .js 文件默认处理不来,需要调用 loader 加载器才可以正常打包,否则报错.
        2, loader 的作用: 协助 webpack 打包处理特定的文件模块,比如:
            {
                1, css-loader 打包 .css 相关的文件
                2, less-loader 打包 .less 相关的文件
                3, babel-loader 打包处理 webpack 无法处理的高级 js 语法
            }
        3, 打包处理css文件
            {
                1, 运行 npm i style-loader@3.0.0 css-loader@5.2.6 -D 命令,安装css文件的loader
                2, 在 webpack.config.js 的module -> rules 数组中,添加 loader 规则:
                    {
                        module: {
                            //所有第三方文件模块的匹配规则
                            rules: [
                                // 文件后缀名的匹配规则
                                {
                                    test: /\.css$/,
                                    use: ['style-loader','css-loader']
                                }
                            ]
                        }
                    }
                3, 其中, test 表示匹配的文件类型, use 表示对应要调用的 loader
                4, 注意: 
                    {
                        use 数组中指定的 loader 顺序是固定的
                        多个 loader 的调用顺序是: 从后往前调用
                    }
            }
    }
    loder 的运行机制
        {
            1, webpack 默认只能打包 .js 的文件,处理不了其他后缀的文件
            2, 由于代码中包含了 index.css 这个文件,因此 webpack 默认处理不了
            3, 当 webpack 发现某个文件处理不了的时候, 会查找 webpack.config.js 这个配置文件,看 module.rules 数组中,是否配置对应的 loder 加载器.
            4, webpack 把 index.css 这个文件,先转交给最后一个 loder 进行处理(先转交给 css-loader )
            5, 当 css-loader 处理完毕后,会把处理结果,转交给下一个 loader (转交给 style-loader )
            6, 当 style-loader 处理完毕之后,发现没有下一个 loader 了,于是就把处理结果,转交给了 webpack
            7, webpack 把 style-loader 处理的结果,合并到 /dist/bundle.js 中,最终生成打包号的文件
        }
    4,打包处理 less 文件
        {
            1, 运行npm i less-loader less -D 命令
            2, 在 webpack.config.js 的 module -> rules 数组中,添加 loader 的规则
                {
                    module: {
                        rules :[
                            {
                                test:/.less$/,
                                use:['style-loader','css-loader','less-loader']
                            }
                        ]
                    }
                }
        }
    5, 打包处理样式表中与 url 路径相关的文件
        {
            1, 运行 npm i url-loader file-loader -D 命令
            2, 在 webpack.config.js 的 module -> rules 数组中,添加 loader 的规则:
                {
                    module: {
                        // 所有第三方文件模块的匹配规则
                        rules: [
                            {
                                test: /\.jpg|png|gif$/,
                                use: 'url-loader?limit=22229'
                            }
                        ]
                    }
                }
            3, 其中 ? 之后的是 loader 的参数:
                limit 用来指定图片的大小,单位是字节(byte)
                只有 <= limit 大小的图片,才会被转换为 base64 格式的图片
        }
    6, 打包处理 js 文件中的高级语法
        {
            1, webpack 只能打包处理一部分高级的 JavaScript 语法,对于 webpack 无法处理的高级 js 语法,需要借助 babel-loader 进行打包处理.例如: js 的装饰器语法
            2, 安装 babel-loader 相关的包,处理部分 js 高级语法
                {
                    1,运行如下的命令安装对应的依赖包
                        {
                            npm i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D
                        
                        }
                    2, 在 webpack.config.js 的 module -> rules 数组中,添加 loader 规则:
                    //  注意: 必须使用 exclude 指定排除项,因为 node_modules 目录下的第三方包不需要打包构建
                        {
                            test: /\.js$/,
                            use: 'babel-loader',
                            exclude: /node_modules/
                        }
                }
            3,配置 babel-loader 
                {
                    1,在项目根目录下,创建 babel.config.js 的配置文件,定义 Babel 的配置项:
                            module.exports = {
                                // 声明 babel 可用的插件
                                plugins : [['@abel/plugin-proposal-decorators,{legacy:true}]]
                            }
                }
        }
9, 配置 webpack 的打包发布
    {
        package.json 文件的 scripts 节点下,新增 build 命令:
            "scripts": {
                // 开发环境中,运行 dev 命令
                "dev": "webpack serve",
                // 项目发布时,运行 build 命令
                "build": "webpack --mode production"
            }
        --mode 是一个参数项,用来指定 webpack 的运行模式,production 代表生产环境,会对打包生成的文件进行代码压缩和性能优化.
        注意:通过 --mode 指定的参数项,会覆盖 webpack.config.js 中的 mode 节点
    }
10, 打包发布
    1, 把 JavaScript 文件统一生成到 js 目录中
        {
            在 webpack.config.js 配置文件 output 节点下:
                output: {
                    path: path.join(__dirname,'dist'),
                    // 明确告诉 webpack 生成的 bundle.js 文件存放到 dist 目录下的 js 子目录中
                    filename: 'js/bundle.js'
                }
        }
    2, 把图片文件统一生成 images 目录中:
        {
            test: /\.jpg|png|gif$/,
            use: {
                loader: 'url-loader',
                options: {
                    limit: 22228,
                    // 明确告诉 webpack 生成的图片文件,存储到 dist 目录下的 image 文件中
                    outputPath: 'images'
                }
            }
        }
    3,自动清理 dist 目录下的旧文件
        {
            为了在每次打包发布时自动清理 dist 目录中的旧文件,可以安装并且配置 clean-webpack-plugin 插件:
                {
                    1, 安装清理 dist 目录的 webpack 插件
                        npm install clean-webpack-plugin@3.0.0 -D
                    2, 按需导入插件 得到插件构造函数,创建插件的实例对象
                        const {CleanWebpackPlugin} = require('clean-webpack-plugin')
                        const cleanPlugin = new CleanWebpackPlugin()
                    3, 把创建的 cleanPlugin 挂载到 plugins 节点中
                        plugins: [htmlPlugin,cleanPlugin]
                }
        }
11, Source Map 的使用和配置
    {
        1, Source Map 是一个信息文件,里面存储着位置信息. Sourc Map 文件中存储着压缩混淆后的代码,所对应的转换前的位置.
            有了它,出错的时候,除错工具将直接显示原始代码,而不是转换后的代码,极大方便后期调试.
        2, 解决 Source Map 的方案
            {
                开发环境下, 推荐在 webpack.config.js 中添加如下配置,可保证运行时报错的行数与源代码行数一致:
                    module.exports = {
                        // eval-source-map 仅限在 开发模式 下使用,不建议 生产模式 下使用
                        // 此选项生成的 Source Map 能够保证 运行时报错的行数 与 源代码行数保持一致
                        devtool: 'eval-source-map'
                    }
            }
        3, webpack 生产环境下的 Source Map:
            {
                1,在生产环境下,如果省略了 devtool 选项,最终生成的文件中 不包含 Sour Map. 这能防止源代码通过 Source Map 的形式暴漏给别有所图之人.
            }
        4, 只定位行数不暴露源代码
            {
                1,在生产环境下,如果只想定位报错的具体行数,且不想暴露源代码,可以设置 devtool 为 nosources-source-map .
            }
    }